package org.kellyjones.examples.camel.routes;

import lombok.extern.slf4j.Slf4j;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.processor.idempotent.kafka.KafkaIdempotentRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import static org.apache.camel.LoggingLevel.INFO;

@Slf4j
@Component
public class FileWatcherRouteBuilder extends RouteBuilder  {

    // What directory are we going to monitor for new file arrivals?
    @Value("${application.directory.inbound}")
    private String directoryToWatch;

    // Once we process a file, where should we move it so as not to pollute the inbound?
    @Value("${application.directory.done}")
    private String directoryMoveToWhenDone;

    // What Kafka broker will we consume from?
    @Value("${application.kafka.broker}")
    private String kafkaBroker;

    // What Kafka topic is used for announcements generated by this app?
    @Value("${application.kafka.topics.idempotence}")
    private String idempotenceTopic;

    // What Kafka topic is used for announcements generated by this app?
    @Value("${application.kafka.topics.announcements}")
    private String announcementTopic;


    @Override
    public void configure() throws Exception {

        KafkaIdempotentRepository kafkaIdempotentRepository = createKafkaIdempotentRepository();

        from("file://" + directoryToWatch + "?move=" + directoryMoveToWhenDone)
                .routeId("filewatcher-" + directoryToWatch)

                // **ALWAYS** log that we've detected the arrival of a file. This is NOT idempotent!
                .log(INFO, "File detected: ${file:name}")

                // Use an idempotent consumer to make sure that each file is only processed ONCE.
                .idempotentConsumer(header("CamelFileAbsolutePath"), kafkaIdempotentRepository)

                // Log a message. If we get to this point in the flow, we have passed the idempotence
                // check and know we're dealing with a unique record / only one member of a cluster
                // is processing the record.
                .log(INFO, "File has passed idempotence check, sending announcement to Kafka topic")

                // Risky assumption, not suited for production use: read the entire content of the file as a String,
                // thus the message will represent the file as a whole.
                .convertBodyTo(String.class)
                .to("kafka:" + announcementTopic + "?brokers=" + kafkaBroker)

                // And now we're done.
                .log(INFO, "Done.");
    }


    private KafkaIdempotentRepository createKafkaIdempotentRepository() {
        KafkaIdempotentRepository kafkaIdempotentRepository = new KafkaIdempotentRepository();
        kafkaIdempotentRepository.setBootstrapServers(kafkaBroker);
        kafkaIdempotentRepository.setTopic(idempotenceTopic);

        return kafkaIdempotentRepository;
    }
}
